[
{
  "model": "blog.post",
  "pk": 9,
  "fields": {
    "post_image": "img/post1.jpg",
    "title": "How to set up your first Django Project",
    "slug": "how-set-your-first-django-project",
    "author": 1,
    "body": "Are you new to django? well django is the web framework for perfectionist with deadline. So today, I will be showing you how to set up your django project for the first time.\r\n\r\nThe first thing you need to do is to download python from <a href=\"https://python.org/\"target=\"blank\">python.org</a> then install it on your machine. After you've successfully installed it  on your machine, create and activate your python virtual environment by running `python -m venv myvenv && source venv/bin/activate`. Finally, you can now install django by running the following command in your terminal: `pip install django`. \r\n\r\nSince you now have python and django installed nd also have your virtual environment activated. Let's create our django project by following the instructions below;\r\n\r\n(1). run `django-admin startproject mydjangoproject`\r\n\r\n(2). navigate to you project dir by running `cd mydjangoproject`\r\n\r\n(3). if you run `tree` your project structure should look as follows:\r\n\r\n![Project Structure](https://mydjangoaccountstorage.blob.core.windows.net/media/img/post1a.png).\r\n\r\nLet's quickly get familiar with some things here. As you can see the project we just created contains another folder that has the same name with our project, that's where the settings and other management files that has to do with our projects are stored. The `settings.py` file is where all settings for our project are defined.`__init__.py` shows that we are working with a python package, `urls.py` is where url mappings for our views are configured we can also create custom `urls.py` file for each application in our project and the include it in our main `urls.py` in our project folder. We'll talk about `asgi.py` and `wsgi.py` when we get to talk about deployment in future blog post.\r\n\r\nNow let create an application:\r\n\r\n(4). run `django-admin startapp mydjangoapp`.\r\n\r\nRun ` cd mydjangoapp` and run `tree` to see the structure of our application. you should have something like this:\r\n\r\n![Project Structure](https://mydjangoaccountstorage.blob.core.windows.net/media/img/post1b.png).\r\n\r\nAlright, let's talk about this a bit. The `admin.py` is where we are going to how we want our models to displayed on the admin view,  `models.py` is where we define our database tables and fields in form of classes and objects. `tests.py` as the name implies, is where we write unit test for our application using TestCase provided by Django. finally  `views.py` is where we write our views... it's more like an intermediary between our templates and our models.\r\n\r\nNow that you are familiar with the project and application structure,  lets see if we've successfully set up our project. Navigate to `settings.py` and go to the section where we have INSTALLED APPS then add our application to the list of INSTALLED APPS like this:\r\n\r\n![Project Structure](https://mydjangoaccountstorage.blob.core.windows.net/media/img/post1c.png).\r\n\r\nAfter you've done that, run the following:\r\n\r\n(5). to convert our models to something more readable to SQL run `python manage.py makemigrations`\r\n\r\n(6). to migrate those SQL scripts to our database run `python manage.py migrate`. \r\n\r\n(7). finally run `python manage.py runserver` to run you application on localhost. navigate to `127.0.0.1:8000` on your browser and you will see a page like this:\r\n\r\n![Project Structure](https://mydjangoaccountstorage.blob.core.windows.net/media/img/post1d.png).\r\n\r\nCongratulations!! you've set up your first django project project.",
    "publish": "2020-06-28T20:16:34Z",
    "created": "2020-06-28T20:40:05.284Z",
    "updated": "2020-06-28T22:50:13.175Z",
    "status": "published"
  }
},
{
  "model": "blog.post",
  "pk": 10,
  "fields": {
    "post_image": "img/post2_OlJDHEh.png",
    "title": "Model Inheritance In Django",
    "slug": "model-inheritance-django",
    "author": 1,
    "body": "Working with model inheritance in django is very similar to the standard class inheritance in Python. Hence, we can work with model inheritance in django in three distinct ways.\r\n\r\n(1). Abstract Model Inheritance\r\n\r\nAbstract model is a *base* class in which we define fields that we want to include in our various child models. Django does not create a database table for abstract model  during migrations. Instead django create database table for all child models including the fields inherited from the *abstract class* .\r\n\r\nWe tell django that a model is an abstract model by including `abstract = True` in the Meta class of the particular model . Also, all we need to do to create a child model  is just to subclass  the abstract model.\r\n\r\nThe following example shows an Abstract Content model, and two child models:\r\n\r\n<img src=\"https://mydjangoaccountstorage.blob.core.windows.net/media/img/abstract.png\" alt=\"Abstract Model\" style=\"width: 660px; height: 387px;\"></img>\r\n\r\n\r\n(2). Multi-Table Model Inheritance\r\n\r\nUnlike Abstract model,  In multi-table model inheritance, each model corresponds to a database table. I.e django create database table for both the base model and the child model. Django then creates a `OneToOnField` field for the relation =ship between the base model and and child model.\r\n\r\nLike Abstract model one needs to subclass an existing model , but there's no need to add `abstract = True` to the meta class of the child model.\r\n\r\nThe following example shows what multi-table  Inheritance looks like:\r\n\r\n<img src=\"https://mydjangoaccountstorage.blob.core.windows.net/media/img/multi.png\" alt=\"Multi-Table Model Inheritance\" style=\"width: 660px; height: 387px;\"></img>\r\n\r\n\r\n(3). Proxy Models\r\n\r\nLastly, Django offers the proxy model option to use model inheritances. The idea here is that  both the base model and the child model use the same database table i.e the database table of the base model. To use a proxy model, we add `proxy = True` to the Meta class of the child node.\r\n\r\nAn example of how proxy model works is given below:\r\n\r\n<img src=\"https://mydjangoaccountstorage.blob.core.windows.net/media/img/proxy.png\" alt=\"Abstract Model\" style=\"width: 660px; height: 387px;\"></img>\r\n\r\nHope you enjoyed this short blurb on using model inheritance in django. Drop comments below and  Stay tuned as you check out similar posts below. keep coding!!",
    "publish": "2020-07-06T19:37:41Z",
    "created": "2020-07-06T20:14:26.112Z",
    "updated": "2020-07-06T21:08:35.027Z",
    "status": "published"
  }
}
]
